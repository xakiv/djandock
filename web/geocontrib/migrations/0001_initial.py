# Generated by Django 2.2 on 2019-09-17 09:51

import geocontrib.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_administrator', models.BooleanField(default=False, verbose_name='Est gestionnaire-métier')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, null=True, verbose_name="Date de l'évènement")),
                ('object_type', models.CharField(choices=[('comment', 'Commentaire'), ('feature', 'Signalement'), ('attachment', 'Pièce jointe'), ('project', 'Projet')], max_length=100, verbose_name="Type de l'objet lié")),
                ('event_type', models.CharField(choices=[('create', 'Création'), ('update', 'Modification'), ('archive', 'Archivage'), ('delete', 'Suppression')], max_length=100, verbose_name="Type de l'évènement")),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('project_slug', models.SlugField(max_length=256, verbose_name='Slug du projet')),
                ('feature_type_slug', models.SlugField(blank=True, max_length=256, null=True, verbose_name='Slug du type de signalement')),
                ('feature_id', models.UUIDField(blank=True, editable=False, null=True, verbose_name='Identifiant du signalement')),
                ('comment_id', models.UUIDField(blank=True, editable=False, null=True, verbose_name='Identifiant du commentaire')),
                ('attachment_id', models.UUIDField(blank=True, editable=False, null=True, verbose_name='Identifiant de la pièce jointe')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Évènement',
                'verbose_name_plural': 'Évènements',
            },
        ),
        migrations.CreateModel(
            name='FeatureLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relation_type', models.CharField(choices=[('doublon', 'Doublon'), ('remplace', 'Remplace'), ('est_remplace_par', 'Est remplacé par'), ('depend_de', 'Dépend de')], default='doublon', max_length=50, verbose_name='Type de liaison')),
                ('feature_from', models.UUIDField(blank=True, null=True, verbose_name='Identifiant du signalement source')),
                ('feature_to', models.UUIDField(blank=True, null=True, verbose_name='Identifiant du signalement lié')),
            ],
            options={
                'verbose_name': 'Type de liaison',
                'verbose_name_plural': 'Types de liaison',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=128, unique=True, verbose_name='Titre')),
                ('slug', models.SlugField(editable=False, max_length=256, null=True, verbose_name='Slug')),
                ('created_on', models.DateTimeField(blank=True, null=True, verbose_name='Date de création')),
                ('updated_on', models.DateTimeField(blank=True, null=True, verbose_name='Date de modification')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('moderation', models.BooleanField(default=False, verbose_name='Modération')),
                ('thumbnail', models.ImageField(default='default.png', upload_to=geocontrib.models.Project.thumbnail_dir, verbose_name='Illustration')),
                ('archive_feature', models.PositiveIntegerField(blank=True, null=True, verbose_name='Délai avant archivage')),
                ('delete_feature', models.PositiveIntegerField(blank=True, null=True, verbose_name='Délai avant suppression')),
            ],
            options={
                'verbose_name': 'Projet',
                'verbose_name_plural': 'Projets',
            },
        ),
        migrations.CreateModel(
            name='UserLevelPermission',
            fields=[
                ('user_type_id', models.CharField(choices=[('anonymous', 'Utilisateur anonyme'), ('logged_user', 'Utilisateur connecté'), ('contributor', 'Contributeur'), ('moderator', 'Modérateur'), ('admin', 'Administrateur projet')], max_length=100, primary_key=True, serialize=False, verbose_name='Identifiant')),
                ('rank', models.PositiveSmallIntegerField(unique=True, verbose_name='Rang')),
            ],
            options={
                'verbose_name': 'Niveau de permission',
                'verbose_name_plural': 'Niveaux de permisions',
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, null=True, verbose_name="Date de création de l'abonnement")),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='geocontrib.Project')),
                ('users', models.ManyToManyField(help_text='Utilisateurs abonnés', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateurs')),
            ],
            options={
                'verbose_name': 'Abonnement',
                'verbose_name_plural': 'Abonnements',
            },
        ),
        migrations.CreateModel(
            name='StackedEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sending_frequency', models.CharField(blank=True, choices=[('never', 'Jamais'), ('instantly', 'Instantanément'), ('daily', 'Quotidienne'), ('weekly', 'Hebdomadaire')], default='daily', max_length=20, null=True, verbose_name='Fréquence de notification')),
                ('state', models.CharField(choices=[('pending', "Tâche en attente d'exécution"), ('failed', 'Echec de la tâche'), ('successful', 'Tâche terminée avec succès')], default='pending', max_length=20, verbose_name='État')),
                ('project_slug', models.SlugField(blank=True, max_length=256, null=True, verbose_name='Slug du projet')),
                ('created_on', models.DateTimeField(blank=True, null=True, verbose_name='Date de création du lot')),
                ('updated_on', models.DateTimeField(blank=True, null=True, verbose_name='Date de dernière modification du lot')),
                ('schedualed_delivery_on', models.DateTimeField(blank=True, null=True, verbose_name="Timestamp d'envoi prévu")),
                ('events', models.ManyToManyField(to='geocontrib.Event')),
            ],
            options={
                'verbose_name': 'Lot de notifications',
                'verbose_name_plural': 'Lots de notifications des abonnées',
            },
        ),
        migrations.AddField(
            model_name='project',
            name='access_level_arch_feature',
            field=models.ForeignKey(limit_choices_to=geocontrib.models.Project.limit_arch, on_delete=django.db.models.deletion.PROTECT, related_name='access_archived', to='geocontrib.UserLevelPermission', verbose_name='Visibilité des signalements archivés'),
        ),
        migrations.AddField(
            model_name='project',
            name='access_level_pub_feature',
            field=models.ForeignKey(limit_choices_to=geocontrib.models.Project.limit_pub, on_delete=django.db.models.deletion.PROTECT, related_name='access_published', to='geocontrib.UserLevelPermission', verbose_name='Visibilité des signalements publiés'),
        ),
        migrations.AddField(
            model_name='project',
            name='creator',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Créateur'),
        ),
        migrations.CreateModel(
            name='Layer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=256, null=True, verbose_name='Titre')),
                ('service', models.CharField(max_length=256, verbose_name='Service')),
                ('order', models.PositiveSmallIntegerField(default=0, verbose_name="Numéro d'ordre")),
                ('schema_type', models.CharField(choices=[('wms', 'WMS'), ('tms', 'TMS')], default='wms', max_length=50, verbose_name='Type de couche')),
                ('options', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, verbose_name='Options')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='geocontrib.Project')),
            ],
            options={
                'verbose_name': 'Couche',
                'verbose_name_plural': 'Couches',
                'ordering': ['project', 'order'],
            },
        ),
        migrations.CreateModel(
            name='FeatureType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=128, verbose_name='Titre')),
                ('slug', models.SlugField(editable=False, max_length=256, null=True, verbose_name='Slug')),
                ('geom_type', models.CharField(choices=[('linestring', 'Ligne'), ('point', 'Point'), ('polygon', 'Polygone')], default='point', max_length=50, verbose_name='Type de géométrie')),
                ('color', models.CharField(blank=True, max_length=7, null=True, verbose_name='Couleur')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='geocontrib.Project')),
            ],
            options={
                'verbose_name': 'Type de signalement',
                'verbose_name_plural': 'Types de signalements',
            },
        ),
        migrations.CreateModel(
            name='Feature',
            fields=[
                ('feature_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Identifiant')),
                ('title', models.CharField(blank=True, max_length=128, null=True, verbose_name='Titre')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('status', models.CharField(choices=[('draft', 'Brouillon'), ('pending', 'En attente de publication'), ('published', 'Publié'), ('archived', 'Archivé')], default='draft', max_length=50, verbose_name='Statut')),
                ('created_on', models.DateTimeField(blank=True, null=True, verbose_name='Date de création')),
                ('updated_on', models.DateTimeField(blank=True, null=True, verbose_name='Date de maj')),
                ('archived_on', models.DateField(blank=True, null=True, verbose_name="Date d'archivage automatique")),
                ('deletion_on', models.DateField(blank=True, null=True, verbose_name='Date de suppression automatique')),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(srid=4326, verbose_name='Géométrie')),
                ('feature_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Créateur')),
                ('feature_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='geocontrib.FeatureType')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='geocontrib.Project')),
            ],
            options={
                'verbose_name': 'Signalement',
                'verbose_name_plural': 'Signalements',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Identifiant')),
                ('created_on', models.DateTimeField(blank=True, null=True, verbose_name='Date de création')),
                ('feature_id', models.UUIDField(blank=True, null=True, verbose_name='Identifiant du signalement')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Commentaire')),
                ('feature_type_slug', models.SlugField(max_length=128, verbose_name='Slug du type de signalement')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Auteur')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='geocontrib.Project')),
            ],
            options={
                'verbose_name': 'Commentaire',
                'verbose_name_plural': 'Commentaires',
            },
        ),
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='Identifiant')),
                ('created_on', models.DateTimeField(blank=True, null=True, verbose_name='Date de création')),
                ('feature_id', models.UUIDField(blank=True, null=True, verbose_name='Identifiant du signalement')),
                ('title', models.CharField(max_length=128, verbose_name='Titre')),
                ('info', models.TextField(blank=True, null=True, verbose_name='Info')),
                ('object_type', models.CharField(choices=[('comment', 'Commentaire'), ('feature', 'Signalement')], max_length=50, verbose_name="Type d'objet concerné")),
                ('attachment_file', models.FileField(upload_to=geocontrib.models.Attachment.attachement_dir, verbose_name='Pièce jointe')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Auteur')),
                ('comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='geocontrib.Comment')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='geocontrib.Project')),
            ],
            options={
                'verbose_name': 'Pièce jointe',
                'verbose_name_plural': 'Pièces jointes',
            },
        ),
        migrations.CreateModel(
            name='CustomField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(blank=True, max_length=128, null=True, verbose_name='Label')),
                ('name', models.CharField(blank=True, max_length=128, null=True, verbose_name='Nom')),
                ('position', models.PositiveSmallIntegerField(default=0, verbose_name='Position')),
                ('field_type', models.CharField(choices=[('boolean', 'Booléen'), ('char', 'Chaîne de caractères'), ('date', 'Date'), ('list', 'Liste de valeurs'), ('integer', 'Nombre entier'), ('decimal', 'Nombre décimal'), ('text', 'Texte multiligne')], default='boolean', max_length=50, verbose_name='Type de champ')),
                ('options', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=256), blank=True, null=True, size=None)),
                ('feature_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='geocontrib.FeatureType')),
            ],
            options={
                'verbose_name': 'Champ personnalisé',
                'verbose_name_plural': 'Champs personnalisés',
                'unique_together': {('name', 'feature_type')},
            },
        ),
        migrations.CreateModel(
            name='Authorization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(blank=True, null=True, verbose_name='Date de création')),
                ('updated_on', models.DateTimeField(blank=True, null=True, verbose_name='Date de modification')),
                ('level', models.ForeignKey(limit_choices_to=geocontrib.models.Authorization.upper_ranks, on_delete=django.db.models.deletion.CASCADE, to='geocontrib.UserLevelPermission')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='geocontrib.Project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Autorisation',
                'unique_together': {('user', 'project')},
            },
        ),
    ]
